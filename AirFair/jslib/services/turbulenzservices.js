var ServiceRequester=function(){function ServiceRequester(){}ServiceRequester.prototype.request=function(params){var discardRequestFn=function discardRequestFn(){if(params.callback){params.callback({ok:false,msg:"Service Unavailable. Discarding request"},503)}};var that=this;var serviceStatusObserver=this.serviceStatusObserver;var onServiceStatusChange;onServiceStatusChange=function onServiceStatusChangeFn(running,discardRequest){if(discardRequest){if(!params.neverDiscard){serviceStatusObserver.unsubscribe(onServiceStatusChange);discardRequestFn()}}else if(running){serviceStatusObserver.unsubscribe(onServiceStatusChange);that.request(params)}};if(!this.running){if(this.discardRequests&&!params.neverDiscard){TurbulenzEngine.setTimeout(discardRequestFn,0);return false}if(!params.waiting){params.waiting=true;serviceStatusObserver.subscribe(onServiceStatusChange)}return true}var oldResponseFilter=params.responseFilter;params.responseFilter=function checkServiceUnavailableFn(callContext,makeRequest,responseJSON,status){if(status===503){var responseObj=JSON.parse(responseJSON);var statusObj=responseObj.data;var discardRequests=statusObj?statusObj.discardRequests:true;that.discardRequests=discardRequests;if(discardRequests&&!params.neverDiscard){discardRequestFn()}else{serviceStatusObserver.subscribe(onServiceStatusChange)}TurbulenzServices.serviceUnavailable(that,callContext);return false}else{if(oldResponseFilter){return oldResponseFilter.call(params.requestHandler,callContext,makeRequest,responseJSON,status)}return true}};Utilities.ajax(params);return true};ServiceRequester.create=function create(serviceName,params){var serviceRequester=new ServiceRequester;if(!params){params={}}serviceRequester.running=true;serviceRequester.discardRequests=false;serviceRequester.serviceStatusObserver=Observer.create();serviceRequester.serviceName=serviceName;serviceRequester.onServiceUnavailable=params.onServiceUnavailable;serviceRequester.onServiceAvailable=params.onServiceAvailable;return serviceRequester};return ServiceRequester}();var TurbulenzServices=function(){function TurbulenzServices(){}TurbulenzServices.multiplayerJoinRequestQueue={argsQueue:[],handler:function nopFn(){},context:undefined,paused:true,onEvent:function onEventFn(handler,context){this.handler=handler;this.context=context},push:function pushFn(sessionId){var args=[sessionId];if(this.paused){this.argsQueue.push(args)}else{this.handler.apply(this.context,args)}},shift:function shiftFn(){var args=this.argsQueue.shift();return args?args[0]:undefined},clear:function clearFn(){this.argsQueue=[]},pause:function pauseFn(){this.paused=true},resume:function resumeFn(){this.paused=false;while(this.argsQueue.length){this.handler.apply(this.context,this.argsQueue.shift());if(this.paused){break}}}};TurbulenzServices.available=function available(){return window.gameSlug!==undefined};TurbulenzServices.addBridgeEvents=function addBridgeEvents(){var turbulenz=window.top.Turbulenz;var turbulenzData=turbulenz&&turbulenz.Data||{};var sessionToJoin=turbulenzData.joinMultiplayerSessionId;var that=this;var onJoinMultiplayerSession=function onJoinMultiplayerSessionFn(joinMultiplayerSessionId){that.multiplayerJoinRequestQueue.push(joinMultiplayerSessionId)};var onReceiveConfig=function onReceiveConfigFn(configString){var config=JSON.parse(configString);if(config.mode){that.mode=config.mode}if(config.joinMultiplayerSessionId){that.multiplayerJoinRequestQueue.push(config.joinMultiplayerSessionId)}that.bridgeServices=!!config.bridgeServices};if(sessionToJoin){this.multiplayerJoinRequestQueue.push(sessionToJoin)}TurbulenzBridge.setOnMultiplayerSessionToJoin(onJoinMultiplayerSession);TurbulenzBridge.setOnReceiveConfig(onReceiveConfig);TurbulenzBridge.triggerRequestConfig();this.responseHandlers=[null];this.responseIndex=0;TurbulenzBridge.on("bridgeservices.response",function(jsondata){that.routeResponse(jsondata)})};TurbulenzServices.callOnBridge=function callOnBridge(event,data,callback){var request={data:data,key:undefined};if(callback){this.responseIndex+=1;this.responseHandlers[this.responseIndex]=callback;request.key=this.responseIndex}TurbulenzBridge.emit("bridgeservices."+event,JSON.stringify(request))};TurbulenzServices.addSignature=function addSignature(data,url){var str;data.requestUrl=url;str=TurbulenzEngine.encrypt(JSON.stringify(data));data.str=str;data.signature=TurbulenzEngine.generateSignature(str);return data};TurbulenzServices.routeResponse=function routeResponse(jsondata){var response=JSON.parse(jsondata);var index=response.key||0;var callback=this.responseHandlers[index];if(callback){this.responseHandlers[index]=null;callback(response.data)}};TurbulenzServices.defaultErrorCallback=function(errorMsg,httpStatus){};TurbulenzServices.onServiceUnavailable=function onServiceUnavailable(serviceName,callContext){};TurbulenzServices.onServiceAvailable=function onServiceAvailable(serviceName,callContext){};TurbulenzServices.createGameSession=function createGameSession(requestHandler,sessionCreatedFn,errorCallbackFn){return GameSession.create(requestHandler,sessionCreatedFn,errorCallbackFn)};TurbulenzServices.createMappingTable=function createMappingTable(requestHandler,gameSession,tableReceivedFn,defaultMappingSettings,errorCallbackFn){var mappingTable;var mappingTableSettings=gameSession&&gameSession.mappingTable;var mappingTableURL;var mappingTablePrefix;var assetPrefix;if(mappingTableSettings){mappingTableURL=mappingTableSettings.mappingTableURL;mappingTablePrefix=mappingTableSettings.mappingTablePrefix;assetPrefix=mappingTableSettings.assetPrefix}else if(defaultMappingSettings){mappingTableURL=defaultMappingSettings.mappingTableURL||(defaultMappingSettings.mappingTableURL===""?"":"mapping_table.json");mappingTablePrefix=defaultMappingSettings.mappingTablePrefix||(defaultMappingSettings.mappingTablePrefix===""?"":"staticmax/");assetPrefix=defaultMappingSettings.assetPrefix||(defaultMappingSettings.assetPrefix===""?"":"missing/")}else{mappingTableURL="mapping_table.json";mappingTablePrefix="staticmax/";assetPrefix="missing/"}var mappingTableErr=function mappingTableErrFn(msg){var mapping=defaultMappingSettings&&(defaultMappingSettings.urnMapping||{});var errorCallback=errorCallbackFn||TurbulenzServices.defaultErrorCallback;mappingTable.setMapping(mapping);errorCallback(msg)};var mappingTableParams={mappingTableURL:mappingTableURL,mappingTablePrefix:mappingTablePrefix,assetPrefix:assetPrefix,requestHandler:requestHandler,onload:tableReceivedFn,errorCallback:mappingTableErr};mappingTable=MappingTable.create(mappingTableParams);return mappingTable};TurbulenzServices.createLeaderboardManager=function createLeaderboardManager(requestHandler,gameSession,leaderboardMetaReceived,errorCallbackFn){return LeaderboardManager.create(requestHandler,gameSession,leaderboardMetaReceived,errorCallbackFn)};TurbulenzServices.createBadgeManager=function createBadgeManager(requestHandler,gameSession){return BadgeManager.create(requestHandler,gameSession)};TurbulenzServices.createStoreManager=function createStoreManager(requestHandler,gameSession,storeMetaReceived,errorCallbackFn){return StoreManager.create(requestHandler,gameSession,storeMetaReceived,errorCallbackFn)};TurbulenzServices.createMultiplayerSessionManager=function createMultiplayerSessionManager(requestHandler,gameSession){return MultiPlayerSessionManager.create(requestHandler,gameSession)};TurbulenzServices.createUserProfile=function createUserProfile(requestHandler,profileReceivedFn,errorCallbackFn){var userProfile={};if(!errorCallbackFn){errorCallbackFn=TurbulenzServices.defaultErrorCallback}var loadUserProfileCallback=function loadUserProfileCallbackFn(userProfileData){if(userProfileData&&userProfileData.ok){userProfileData=userProfileData.data;var p;for(p in userProfileData){if(userProfileData.hasOwnProperty(p)){userProfile[p]=userProfileData[p]}}}};var url="/api/v1/profiles/user";if(TurbulenzServices.available()){this.getService("profiles").request({url:url,method:"GET",callback:function createUserProfileAjaxErrorCheck(jsonResponse,status){if(status===200){loadUserProfileCallback(jsonResponse)}else if(errorCallbackFn){errorCallbackFn("TurbulenzServices.createUserProfile error with HTTP status "+status+": "+jsonResponse.msg,status)}if(profileReceivedFn){profileReceivedFn(userProfile)}},requestHandler:requestHandler})}return userProfile};TurbulenzServices.upgradeAnonymousUser=function upgradeAnonymousUser(upgradeCB){if(upgradeCB){var onUpgrade=function onUpgradeFn(_signal){upgradeCB()};TurbulenzBridge.on("user.upgrade.occurred",onUpgrade)}TurbulenzBridge.emit("user.upgrade.show")};TurbulenzServices.sendCustomMetricEvent=function sendCustomMetricEvent(eventKey,eventValue,requestHandler,gameSession,errorCallbackFn){if(!errorCallbackFn){errorCallbackFn=TurbulenzServices.defaultErrorCallback}if(!TurbulenzServices.available()){if(errorCallbackFn){errorCallbackFn("TurbulenzServices.sendCustomMetricEvent failed: Service not available",0)}return}if("string"!==typeof eventKey||0===eventKey.length){if(errorCallbackFn){errorCallbackFn("TurbulenzServices.sendCustomMetricEvent failed: Event key must be a non-empty string",0)}return}if(isNaN(parseFloat(eventValue))||!isFinite(eventValue)){if("[object Array]"!==Object.prototype.toString.call(eventValue)){if(errorCallbackFn){errorCallbackFn("TurbulenzServices.sendCustomMetricEvent failed: Event value must be a number or an array of numbers",0)}return}var i,valuesLength=eventValue.length;for(i=0;i<valuesLength;i+=1){if(isNaN(parseFloat(eventValue[i]))||!isFinite(eventValue[i])){if(errorCallbackFn){errorCallbackFn("TurbulenzServices.sendCustomMetricEvent failed: Event value array elements must be numbers",0)}return}}}this.getService("customMetrics").request({url:"/api/v1/custommetrics/add-event/"+gameSession.gameSlug,method:"POST",data:{key:eventKey,value:eventValue,gameSessionId:gameSession.gameSessionId},callback:function sendCustomMetricEventAjaxErrorCheck(jsonResponse,status){if(status!==200&&errorCallbackFn){errorCallbackFn("TurbulenzServices.sendCustomMetricEvent error with HTTP status "+status+": "+jsonResponse.msg,status)}},requestHandler:requestHandler,encrypt:true})};TurbulenzServices.services={};TurbulenzServices.waitingServices={};TurbulenzServices.pollingServiceStatus=false;TurbulenzServices.defaultPollInterval=4e3;TurbulenzServices.getService=function getService(serviceName){var services=this.services;if(services.hasOwnProperty(serviceName)){return services[serviceName]}else{var service=ServiceRequester.create(serviceName);services[serviceName]=service;return service}};TurbulenzServices.serviceUnavailable=function serviceUnavailable(service,callContext){var waitingServices=this.waitingServices;var serviceName=service.serviceName;if(waitingServices.hasOwnProperty(serviceName)){return}waitingServices[serviceName]=service;service.running=false;var onServiceUnavailableCallbacks=function onServiceUnavailableCallbacksFn(service){var onServiceUnavailable=callContext.onServiceUnavailable;if(onServiceUnavailable){onServiceUnavailable.call(service,callContext)}if(service.onServiceUnavailable){service.onServiceUnavailable()}if(TurbulenzServices.onServiceUnavailable){TurbulenzServices.onServiceUnavailable(service)}};if(service.discardRequests){onServiceUnavailableCallbacks(service)}if(this.pollingServiceStatus){return}var that=this;var pollServiceStatus;var serviceUrl="/api/v1/service-status/game/read/"+window.gameSlug;var servicesStatusCB=function servicesStatusCBFn(responseObj,status){if(status===200){var statusObj=responseObj.data;var servicesObj=statusObj.services;var retry=false;var serviceName;for(serviceName in waitingServices){if(waitingServices.hasOwnProperty(serviceName)){var service=waitingServices[serviceName];var serviceData=servicesObj[serviceName];var serviceRunning=serviceData.running;service.running=serviceRunning;service.description=serviceData.description;if(serviceRunning){if(service.discardRequests){var onServiceAvailable=callContext.onServiceAvailable;if(onServiceAvailable){onServiceAvailable.call(service,callContext)}if(service.onServiceAvailable){service.onServiceAvailable()}if(TurbulenzServices.onServiceAvailable){TurbulenzServices.onServiceAvailable(service)}}delete waitingServices[serviceName];service.discardRequests=false;service.serviceStatusObserver.notify(serviceRunning,service.discardRequests)}else{if(serviceData.discardRequests&&!service.discardRequests){service.discardRequests=true;onServiceUnavailableCallbacks(service);service.serviceStatusObserver.notify(serviceRunning,service.discardRequests)}retry=true}}}if(!retry){this.pollingServiceStatus=false;return}TurbulenzEngine.setTimeout(pollServiceStatus,statusObj.pollInterval*1e3)}else{TurbulenzEngine.setTimeout(pollServiceStatus,that.defaultPollInterval)}};pollServiceStatus=function pollServiceStatusFn(){Utilities.ajax({url:serviceUrl,method:"GET",callback:servicesStatusCB})};pollServiceStatus()};return TurbulenzServices}();if(typeof TurbulenzBridge!=="undefined"){TurbulenzServices.addBridgeEvents()}else{debug.log("No TurbulenzBridge object")}