"use strict";var ShaderManager=function(){function ShaderManager(){}ShaderManager.version=1;ShaderManager.prototype.get=function(path){debug.abort("abstract method");return null};ShaderManager.create=function create(gd,rh,ds,errorCallback,log){if(!errorCallback){errorCallback=function(){}}var defaultShaderName="default";var defaultShader;if(ds){defaultShader=ds}else{var shaderParams={version:1,name:"default.cgfx",parameters:{worldViewProjection:{type:"float",rows:4,columns:4},diffuse:{type:"sampler2D"}},techniques:{textured3D:[{parameters:["worldViewProjection","diffuse"],semantics:["POSITION","TEXCOORD0"],states:{DepthTestEnable:true,DepthFunc:515,DepthMask:true,CullFaceEnable:true,CullFace:1029,BlendEnable:false},programs:["vp","fp"]}]},programs:{fp:{type:"fragment",code:"#ifdef GL_ES\nprecision mediump float;precision mediump int;\n#endif\nvarying vec4 tz_TexCoord[1];vec4 _ret_0;uniform sampler2D diffuse;void main()\n{_ret_0=texture2D(diffuse,tz_TexCoord[0].xy);gl_FragColor=_ret_0;}"},vp:{type:"vertex",code:"#ifdef GL_ES\nprecision mediump float;precision mediump int;\n#endif\nvarying vec4 tz_TexCoord[1];attribute vec4 ATTR8;attribute vec4 ATTR0;\nvec4 _OUTpos1;vec2 _OUTuv1;uniform vec4 worldViewProjection[4];void main()\n{_OUTpos1=ATTR0.xxxx*worldViewProjection[0]+ATTR0.yyyy*worldViewProjection[1]+ATTR0.zzzz*worldViewProjection[2]+worldViewProjection[3];_OUTuv1=ATTR8.xy;tz_TexCoord[0].xy=ATTR8.xy;gl_Position=_OUTpos1;}"}}};defaultShader=gd.createShader(shaderParams);if(!defaultShader){errorCallback("Default shader not created.")}}var shaders={};var loadingShader={};var loadedObservers={};var numLoadingShaders=0;var pathRemapping=null;var pathPrefix="";shaders[defaultShaderName]=defaultShader;var loadShader=function loadShaderFn(path,onShaderLoaded){if(path===undefined){errorCallback("Invalid texture path passed to ShaderManager.Load")}var shader=shaders[path];if(!shader){if(!loadingShader[path]){loadingShader[path]=true;numLoadingShaders+=1;var observer=Observer.create();loadedObservers[path]=observer;if(onShaderLoaded){observer.subscribe(onShaderLoaded)}var shaderLoaded=function shaderLoadedFn(shaderText){if(shaderText){var shaderParameters=JSON.parse(shaderText);var s=gd.createShader(shaderParameters);if(s){shaders[path]=s}else{delete shaders[path]}observer.notify(s);delete loadedObservers[path]}else{if(log){log.innerHTML+="ShaderManager.load:&nbsp;'"+path+"' failed to load<br>"}delete shaders[path]}delete loadingShader[path];numLoadingShaders-=1};rh.request({src:pathRemapping&&pathRemapping[path]||pathPrefix+path,onload:shaderLoaded})}else if(onShaderLoaded){loadedObservers[path].subscribe(onShaderLoaded)}return defaultShader}else if(onShaderLoaded){TurbulenzEngine.setTimeout(function shaderAlreadyLoadedFn(){onShaderLoaded(shader)},0)}return shader};var mapShader=function mapShaderFn(dst,src){shaders[dst]=shaders[src]};var getShader=function getShaderFn(path){var shader=shaders[path];if(!shader){return defaultShader}return shader};var removeShader=function removeShaderFn(path){if(typeof shaders[path]!=="undefined"){delete shaders[path]}};var reloadShader=function reloadShaderFn(path,callback){removeShader(path);loadShader(path,callback)};var sm=new ShaderManager;if(log){sm.load=function loadShaderLogFn(path,callback){log.innerHTML+="ShaderManager.load:&nbsp;'"+path+"'<br>";return loadShader(path,callback)};sm.map=function mapShaderLogFn(dst,src){log.innerHTML+="ShaderManager.map:&nbsp;'"+src+"' -> '"+dst+"'<br>";mapShader(dst,src)};sm.get=function getShaderLogFn(path){log.innerHTML+="ShaderManager.get:&nbsp;'"+path+"'<br>";return getShader(path)};sm.remove=function removeShaderLogFn(path){log.innerHTML+="ShaderManager.remove:&nbsp;'"+path+"'<br>";removeShader(path)};sm.reload=function reloadShaderLogFn(path,callback){log.innerHTML+="ShaderManager. reload:&nbsp;'"+path+"'<br>";reloadShader(path,callback)}}else{sm.load=loadShader;sm.map=mapShader;sm.get=getShader;sm.remove=removeShader;sm.reload=reloadShader}sm.reloadAll=function reloadAllShadersFn(){for(var t in shaders){if(shaders.hasOwnProperty(t)&&t!==defaultShaderName){reloadShader(t)}}};sm.getAll=function getAllShadersFn(){return shaders};sm.getNumPendingShaders=function getNumPendingShadersFn(){return numLoadingShaders};sm.isShaderLoaded=function isShaderLoadedFn(path){return!loadingShader[path]};sm.isShaderMissing=function isShaderMissingFn(path){return!shaders[path]};sm.setPathRemapping=function setPathRemappingFn(prm,assetUrl){pathRemapping=prm;pathPrefix=assetUrl};sm.destroy=function shaderManagerDestroyFn(){if(shaders){var p;for(p in shaders){if(shaders.hasOwnProperty(p)){var shader=shaders[p];if(shader){shader.destroy()}}}shaders=null}defaultShader=null;loadingShader=null;loadedObservers=null;numLoadingShaders=0;pathRemapping=null;pathPrefix=null;rh=null;gd=null};return sm};return ShaderManager}();